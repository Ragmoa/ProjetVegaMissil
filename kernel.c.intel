/*	
	Projet module AOA - IATIC 4 - 2017 -
	Kernel pour le sujet 8
	Groupe : Doha ROUIBAA - Pablo BOURDELAS - Guillaume RYCKAERT
	Encacrant : Youenn LEBRAS
*/

#include "vegamissil.h"

void kernel (int n, float a[n], int32_t ind[n] ,float b[n] ,float *c){

	int i,j;
	int pad=0;

	if(n%ALIGN) pad=ALIGN-n%ALIGN;
	
	int jump = (sizeof(__m256)/sizeof(float));

	__m256 divTmp;
	__m256 resTmp;

	for (i=0;i<n;i++) c[IND(n-1,i,(n+pad))] = a[ind[i]];
	/*Cette boucle mérite des explications.
	 Pour éléminer les accés indirecte on recopie "a" la dernière ligne de "c". Comme ça on élimine l'accès indirect et on peut vectoriser*/

	for (i=0;i<n;i++){

		divTmp = _mm256_set1_ps(1.0f / b[i]);

		for(j=0;j<n;j+=jump){
			/*c'l'fun */
		 	resTmp = _mm256_load_ps(c+(n-1*(n+pad)+j));
			resTmp = _mm256_mul_ps(resTmp, divTmp);
			_mm256_store_ps(c+(i*(n+pad)+j),resTmp);
		}
	}

}

/*
//		- Original Kernel implementation -

void kernel (int n, float a[n], int32_t ind[n] ,float b[n] ,float (*c)[n]){
	int i,j;

	for (j=0;j<n;j++){	
		for(i=0;i<n;i++){
			c[i][j]= a[ind[j]] / b[i];
		}   
	}
}
*/
