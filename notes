L1= 95% taille L1 ~30Ko ---> Taille 85|Taille totale 29,920 Ko |-> Warmup 10,5K

L2= min 3x taille L1 max 90% taille L2 ~230Ko ---> Taille 238|--- |-> Warmup 
L3= min 3x taille L2 max 50% taille L3 ~3Mo ---> Taille 865|
RAM = 3x taille L3 ~18Mo ---> Taille 2120|


####Config Machine :

- I7 3630QM (~Fin 2012) :
	- 4 cores - 8 threads
	- Freq : ~2.4Ghz (Idle 1.2Ghz - Turbo mode 3.40 Ghz )
	-> lstopo
- 6 Go de RAM

#### Sytéme
- gcc 6.3.1
- Arch x86_64 ( noyaux Linux 4.10.6-1 Arch )

####Premier test : Le warm up

-> Full Cstate

-> CState max : 0

#####Pourquoi l'option X ? :

gcc :

-Og : tout opti non trivial off (voir si une quelconque opti est utilisé)(même resultat que la ref)
-O3 : reference pour le sujet (maqao montre que la double boucle est simplifier en 1, mais puissance processeur encore mal utiliser. bien qu'activé la vectorisation ne se fait pas [Utilisation d'un #pragma ?] )
-Ofast : optimisation agrésive, surport de l'IEEE non stricte (gain de vitesse attendu mais non conluant)
-funsafe-math-optimizations : ( compris dans Ofast mais test a part ) IEEE non stricte (non concluant)
-ffast-math : Flotant non Associatif + IEE non strict ( non concluant )
-frename-registers : Technique de renommage de registre permet de casser les dépendances interinstruction (non concluant)
-fsection-anchors : Non disponible sur l'architechture cible donc non testé - Optimisation agressive sur les accès mémoire pour diminuer le nombre de calcul d'adresse 

icc :
	no option : test de icc sans opti ( code plus lent )
	-O3 : niveau d'optimisation équivalent a gcc
	-fast : optimisation ultra agressive, code extrémement rapide. Doute sur la consitence du code produit car imposible de l'analyser avec maqao. Vectorisation total suposé effective 
	-Ofast : résultat et effet similaire a gcc


